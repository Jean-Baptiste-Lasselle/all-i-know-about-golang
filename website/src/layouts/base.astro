---
import { ViewTransitions } from 'astro:transitions';

import BaseHead from "../components/BaseHead.astro";
import NavBar from "../components/NavBar.astro";
import SideBar from "../components/SideBar.astro";
import Footer from "../components/Footer.astro";

import '../assets/css/global.css'
import type { MarkdownHeading } from 'astro';
import TableOfContents from '../components/TableOfContents.astro';

interface Props {
  title: string
  toc_headings: MarkdownHeading[]
}
const { title, toc_headings } = Astro.props;
---

<html lang="en" class="smooth-scroll overflow-y-scroll no-scrollbar">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <BaseHead title={title} />
    <ViewTransitions />
  </head>
  <body>
    <div class="flex flex-col h-screen justify-between overflow-y-scroll no-scrollbar">
        <!--
        <header class="h-10 bg-red-500">Header</header>
        <main class="mb-auto h-10 bg-green-500">Content</main>
        <footer class="h-10 bg-blue-500">Footer</footer>
         -->

         <NavBar />
<div id="main_content" class="grid grid-cols-4 gap-4 container mx-auto md:container md:mx-auto mt-24">
  <div class="left column side toc">
  <TableOfContents headings={toc_headings}/>

  </div>

  <div class="right column main content col-span-3">
    <div class="drawer drawer-end">
      <input id="my-drawer" type="checkbox" class="drawer-toggle" />
      <input id="my-toc-drawer" type="checkbox" class="drawer-toggle" /> 

      <div class="drawer-content p-3">
        <!-- Page content here -->
        <!-- label for="my-drawer-4" class="drawer-button btn btn-primary">Open drawer</label -->


        <slot />
        <!-- your content is injected here -->
      </div>
      <div class="drawer-side">
        <label for="my-drawer" aria-label="close sidebar" class="drawer-overlay"
        ></label>
        <SideBar />
      </div>

    </div>
  </div>
</div>

     <script>
      document.addEventListener('astro:page-load', ()=>{
        const copyButtonLabel = "Copy Code";
        // use a class selector if available
        let blocks = document.querySelectorAll("pre");

        blocks.forEach((block) => {
          // only add button if browser supports Clipboard API
          if (navigator.clipboard) {
            let button = document.createElement("button");
            // let button = document.createElement("a");

            button.innerText = copyButtonLabel;
            button.classList.add("btn");
            button.classList.add("mt-3");
            // button.classList.add("btn-active");
            // button.classList.add("btn-ghost");


            block.appendChild(button);

            button.addEventListener("click", async () => {
              await copyCode(block, button);
            });
          }
        });

        async function copyCode(block: any, button: any) {
          let code = block.querySelector("code");
          let text = code.innerText;

          await navigator.clipboard.writeText(text);

          // visual feedback that task is completed
          button.innerText = "Code Copied";

          setTimeout(() => {
            button.innerText = copyButtonLabel;
          }, 700);
        }
      });


     </script>
         <Footer />
    </div>
  </body>
</html>
